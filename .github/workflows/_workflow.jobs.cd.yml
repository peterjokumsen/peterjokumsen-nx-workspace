name: '[♻️] build, deploy, and audit'
# This workflow should be used for deploying a single application
# It will check if the application has been affected by the latest changes,
# and deploy the application if it has been affected.
# Will also attempt to close staging environment if action is `closed`
on:
  workflow_call:
    inputs:
      audit_urls:
        description: 'Urls to test'
        required: true
        type: string
      build_location:
        description: 'Where the app is compiled to, to be published as artifact'
        required: true
        type: string
      project_name:
        description: 'Project name'
        required: true
        type: string
      resource_group:
        description: 'Resource group'
        required: true
        type: string
      # defaulted inputs:
      az_cli_version:
        description: 'AZ CLI version'
        required: false
        type: 'string'
        default: '2.63.0'
      bicep_main_file:
        description: 'Bicep main file'
        required: false
        type: string
        default: './.biceps/main.bicep'
      force_deploy:
        description: 'Force deployment'
        required: false
        type: boolean
        default: false
      location:
        description: 'Location'
        required: false
        type: string
        default: 'westeurope'
      sub_domain:
        description: 'Sub-domain for deployment'
        type: string
        default: ''

permissions:
  contents: read
  pull-requests: write
  security-events: write
  id-token: write

jobs:
  # build the project when it is affected by the latest changes
  build_deploy:
    if: github.event.action != 'closed'
    runs-on: ubuntu-latest
    name: '🏭 & 🚀'
    steps:
      - name: 'Prepare names 📝'
        id: prepare_names
        run: |
          gitSha='${{ github.sha }}'
          shortSha=${gitSha:0:7}
          branchName='${{ github.ref_name }}'
          appName='${{ inputs.project_name }}'
          subDomain='${{ inputs.sub_domain }}'
          if [ -z "$subDomain" ]; then
            subDomain="$appName"
          fi

          deploymentName="${branchName////-}.$shortSha"

          echo "Deployment name: $deploymentName"
          echo "generated_name=$deploymentName" >> "$GITHUB_OUTPUT"
          echo "Sub-domain: $subDomain"
          echo "sub_domain=$subDomain" >> "$GITHUB_OUTPUT"
          echo "App name: $appName"
          echo "app_name=$appName" >> "$GITHUB_OUTPUT"

      - name: 'Set group deployment parameters 📝'
        id: group_deployment_parameters
        run: |
          if [ -z "${{ inputs.bicep_main_file }}" ]; then
            echo "::error::Bicep main file not found"
            exit 1
          fi

          parameters="--resource-group ${{ inputs.resource_group }} \
              --name '${{ steps.prepare_names.outputs.generated_name }}' \
              --template-file ${{ inputs.bicep_main_file }} \
              --parameters \
                  location='${{ inputs.location }}' \
                  branch='${{ github.ref_name }}' \
                  appName='${{ steps.prepare_names.outputs.app_name }}' \
                  subDomain='${{ steps.prepare_names.outputs.sub_domain }}'"

          echo "parameters=$parameters" >> "$GITHUB_OUTPUT"

      - name: 'Checkout 📥'
        uses: actions/checkout@v4
        with:
          # Number of commits to fetch. 0 indicates all history for all branches and tags.
          fetch-depth: 0
          submodules: true

      - name: 'Install dependencies 📦'
        uses: ./.github/actions/install-deps

      - name: 'Set SHAs 📝'
        id: set_base
        uses: nrwl/nx-set-shas@v4

      # Check if the project is affected by the latest changes
      - name: 'Check if affected 🧪'
        id: is_affected
        run: |
          echo "::group::nx show projects --type app --affected"
          affected_projects=$(npx nx show projects --type app --affected)
          echo "$affected_projects"
          project_name="${{ inputs.project_name }}"
          echo "::endgroup::"
          project_affected="No"
          echo ""
          echo "Checking if $project_name is affected"
          if [[ $affected_projects == *$project_name* ]]; then
            project_affected="Yes"
          fi

          echo "output [project_affected=$project_affected]"
          echo "project_affected=$project_affected" >> "$GITHUB_OUTPUT"

      # Build the project if it is affected
      - name: 'Build ${{ inputs.project_name }}'
        if: steps.is_affected.outputs.project_affected == 'Yes'
        id: build_affected
        run: |
          echo "Setting up configuration for build step"
          build_configuration="production"
          branch_name="${{ github.ref }}"
          if [ "$branch_name" != "refs/heads/main" ]; then
            build_configuration="staging"
          fi
          echo "$build_configuration is the configuration for branch $branch_name"

          echo "::group::nx run ${{ inputs.project_name }}:build:$build_configuration"
          npx nx run "${{ inputs.project_name }}:build:$build_configuration"
          echo "::endgroup::"
          compiled_files="No"
          if [ -d "${{ inputs.build_location }}" ]; then
            compiled_files="Yes"
          fi

          echo "output [compiled_files=$compiled_files]"
          echo "compiled_files=$compiled_files" >> "$GITHUB_OUTPUT"
        env:
          NX_CLOUD_ACCESS_TOKEN: ${{ secrets.NX_CLOUD_ACCESS_TOKEN }}

      # lint bicep files when a pull request is opened or synchronized
      - name: 'AZ CLI login 🔑'
        uses: azure/login@v2
        if: steps.is_affected.outputs.project_affected == 'Yes'
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: 'Lint Bicep 🔍'
        uses: azure/CLI@v2
        if: github.event_name == 'pull_request' && steps.is_affected.outputs.project_affected == 'Yes'
        with:
          azcliversion: ${{ inputs.az_cli_version }}
          inlineScript: |
            az version
            az bicep install
            az bicep version
            az bicep lint --file ${{ inputs.bicep_main_file }} --diagnostics-format sarif > bicep.sarif
            echo '::group::Bicep linting results'
            cat bicep.sarif
            echo '::endgroup::'

      - name: 'Upload SARIF ↗️'
        if: |
          github.event_name == 'pull_request'
          && steps.is_affected.outputs.project_affected == 'Yes'
          && (success() || failure())
        uses: github/codeql-action/upload-sarif@v3
        with:
          category: bicep
          sarif_file: bicep.sarif

      - name: 'Detect changes & validate 📝'
        if: github.event_name != 'push' && steps.is_affected.outputs.project_affected == 'Yes'
        id: static_web_app_what_if
        uses: azure/CLI@v2
        with:
          azcliversion: ${{ inputs.az_cli_version }}
          inlineScript: |
            # https://github.com/Azure/azure-cli/issues/25710
            az config set bicep.use_binary_from_path=false

            echo "::group::Static Web App what-if"

            az deployment group what-if ${{ steps.group_deployment_parameters.outputs.parameters }}

            echo "::endgroup::"
            echo "::group::Static Web App validate"

            az deployment group validate ${{ steps.group_deployment_parameters.outputs.parameters }}

            echo "::endgroup::"

      - name: 'Deploy bicep 🚀'
        if: |
          ((github.event_name == 'push' && github.ref == 'refs/heads/main')
          && steps.is_affected.outputs.project_affected == 'Yes')
          || inputs.force_deploy
        uses: azure/CLI@v2
        with:
          azcliversion: ${{ inputs.az_cli_version }}
          inlineScript: |
            # https://github.com/Azure/azure-cli/issues/25710
            az config set bicep.use_binary_from_path=false
            echo "::group::Static Web App deployment"

            az deployment group create ${{ steps.group_deployment_parameters.outputs.parameters }}

            echo "::endgroup::"

      - name: 'Get SWA API key 🔑'
        id: static_web_app_apikey
        if: steps.is_affected.outputs.project_affected == 'Yes'
        uses: azure/CLI@v2
        with:
          azcliversion: ${{ inputs.az_cli_version }}
          inlineScript: |
            apiKey=$(az staticwebapp secrets list \
              --name '${{ inputs.project_name }}-static-web-app' \
              | jq -r '.properties.apiKey')
            echo "api_key=$apiKey" >> $GITHUB_OUTPUT

      - name: 'Publish ${{ inputs.project_name }} 🚀'
        id: publish_swa
        uses: azure/static-web-apps-deploy@v1
        if: steps.static_web_app_apikey.outputs.api_key != ''
        with:
          azure_static_web_apps_api_token: ${{ steps.static_web_app_apikey.outputs.api_key }}
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          action: 'upload'
          app_location: ${{ inputs.build_location }}/browser
          api_location: '' # Empty for now, no API to deploy
          skip_app_build: true

      # wait for the deployment to return a successful response
      - name: 'Wait for deployment ⌚'
        uses: nev7n/wait_for_response@v1
        with:
          url: '${{ steps.publish_swa.outputs.static_web_app_url }}'
          responseCode: 200
          timeout: 300000
          interval: 1000

      # Prepare the audit URLs using the deployment URL
      - name: Prepare audit URLs 📝
        id: prepare_audit_urls
        run: |
          urls=$(echo "$audit_urls" | tr '\n' ' ')
          for url in $urls; do
            echo "${DEPLOYMENT_URL}${url}" >> ${{ inputs.project_name }}_full_urls.txt
          done

          echo ::group::Full URLs
          cat ${{ inputs.project_name }}_full_urls.txt
          echo ::endgroup::
        env:
          audit_urls: ${{ inputs.audit_urls }}
          DEPLOYMENT_URL: ${{ steps.publish_swa.outputs.static_web_app_url }}

      - name: 'Upload audit URLS 📤'
        uses: actions/upload-artifact@v4
        with:
          name: ${{ inputs.project_name }}-audit-urls
          path: ${{ inputs.project_name }}_full_urls.txt

  # Close the deployed static web app
  close_deployed:
    runs-on: ubuntu-latest
    if: github.event.action == 'closed'
    name: '🧹'
    steps:
      - name: 'AZ CLI login 👤'
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: 'Get API key 🔑'
        id: static_web_app_apikey
        uses: azure/CLI@v2
        with:
          azcliversion: ${{ inputs.az_cli_version }}
          inlineScript: |
            apiKey=$(az staticwebapp secrets list \
              --name '${{ inputs.project_name }}-static-web-app' \
              | jq -r '.properties.apiKey')
            echo "api_key=$apiKey" >> $GITHUB_OUTPUT

      - name: 'Close static web app 🚪'
        if: steps.static_web_app_apikey.outputs.api_key != ''
        uses: Azure/static-web-apps-deploy@1a947af9992250f3bc2e68ad0754c0b0c11566c9
        with:
          action: 'close'
          app_location: ''
          azure_static_web_apps_api_token: ${{ steps.static_web_app_apikey.outputs.api_key }}
