name: '[♻️] preparation'
# This workflow prepares parameters for the deployment job
# And checks if the provided application is affected by the latest changes
on:
  workflow_call:
    inputs:
      branch_name:
        description: 'Branch name'
        required: true
        type: string
      resource_group:
        description: 'Resource group'
        required: true
        type: string
      app_name:
        description: 'App name'
        required: true
        type: string
      bicep_main_file:
        description: 'Bicep main file'
        required: false
        type: string
        default: './.biceps/main.bicep'
      location:
        description: 'Location'
        required: false
        type: string
        default: 'westeurope'

    outputs:
      app_name:
        description: 'App name'
        value: ${{ jobs.prep.outputs.app_name }}
      parameters:
        description: 'Deployment parameters'
        value: ${{ jobs.prep.outputs.parameters }}
      bicep_main_file:
        description: 'Bicep main file'
        value: ${{ inputs.bicep_main_file }}
      app_affected:
        description: 'Is the app affected by the latest changes? (Yes/No)'
        value: ${{ jobs.is_affected.outputs.project_affected }}
      infra_affected:
        description: 'Is the infra affected by the latest changes? (Yes/No)'
        value: ${{ jobs.is_affected.outputs.infra_affected }}
      nx_base:
        description: 'Base SHA for nx commands'
        value: ${{ jobs.is_affected.outputs.nx_base }}

permissions:
  contents: read
  pull-requests: read

jobs:
  prep:
    runs-on: ubuntu-latest
    name: 'Prepare 🛠️'
    steps:
      - name: 'Prepare names 📝'
        id: prepare_names
        run: |
          gitSha='${{ github.sha }}'
          shortSha=${gitSha:0:7}
          branchName='${{ inputs.branch_name }}'
          appName='${{ inputs.app_name }}'
          subDomain='${{ inputs.app_name }}'

          deploymentName="${branchName////-}.$shortSha"

          echo "Deployment name: $deploymentName"
          echo "generated_name=$deploymentName" >> $GITHUB_OUTPUT
          echo "Sub-domain: $subDomain"
          echo "sub_domain=$subDomain" >> $GITHUB_OUTPUT
          echo "App name: $appName"
          echo "app_name=$appName" >> $GITHUB_OUTPUT

      - name: 'Set group deployment parameters 📝'
        id: group_deployment_parameters
        run: |
          if [ -z "${{ inputs.bicep_main_file }}" ]; then
            echo "::error::Bicep main file not found"
            exit 1
          fi

          parameters="--resource-group ${{ inputs.resource_group }} \
              --name '${{ steps.prepare_names.outputs.generated_name }}' \
              --template-file ${{ inputs.bicep_main_file }} \
              --parameters \
                  location='${{ inputs.location }}' \
                  branch='${{ inputs.branch_name }}' \
                  appName='${{ steps.prepare_names.outputs.app_name }}' \
                  subDomain='${{ steps.prepare_names.outputs.sub_domain }}'"

          echo "parameters=$parameters" >> $GITHUB_OUTPUT

    outputs:
      app_name: ${{ steps.prepare_names.outputs.app_name }}
      parameters: ${{ steps.group_deployment_parameters.outputs.parameters }}

  # check if the provided application is affected by the latest changes made
  # outputs the result to be used by subsequent jobs, and the base SHA to be used for affected commands
  is_affected:
    if: github.event.action != 'closed'
    needs:
      - prep
    runs-on: ubuntu-latest
    name: 'Check if affected 🧪'
    steps:
      - name: 'Checkout 📥'
        uses: actions/checkout@v4
        with:
          # Number of commits to fetch. 0 indicates all history for all branches and tags.
          fetch-depth: 0
          submodules: true

      - name: 'Install dependencies 📦'
        uses: ./.github/actions/install-deps

      - name: 'Set SHAs 📝'
        id: set_base
        uses: nrwl/nx-set-shas@v4

      - name: 'Check if affected 🧪'
        id: is_affected
        run: |
          echo "::group::nx show projects --type app --affected"
          affected_projects=$(npx nx show projects --type app --affected)
          echo $affected_projects
          project_name="${{ inputs.app_name }}"
          echo "::endgroup::"
          project_affected="No"
          echo ""
          echo "Checking if $project_name is affected"
          if [[ $affected_projects == *$project_name* ]]; then
            project_affected="Yes"
          fi

          echo "output [project_affected=$project_affected]"
          echo "project_affected=$project_affected" >> $GITHUB_OUTPUT

      - name: 'Check if infra affected 🏗️'
        id: check_biceps
        run: |
          base="${{ steps.set_base.outputs.base }}"
          echo "::group::git diff --name-only $base HEAD"
          CHANGED_FILES=$(git diff --name-only $base HEAD)
          echo "Changed files: $CHANGED_FILES"
          echo "::endgroup::"
          if [[ $CHANGED_FILES == *".bicep"* ]]; then
            echo "infra_affected=Yes" >> $GITHUB_OUTPUT
            echo "infra_affected=Yes"
          else
            echo "infra_affected=No" >> $GITHUB_OUTPUT
            echo "infra_affected=No"
          fi

    outputs:
      project_affected: ${{ steps.is_affected.outputs.project_affected }}
      infra_affected: ${{ steps.check_biceps.outputs.infra_affected }}
      nx_base: ${{ steps.set_base.outputs.base }}
