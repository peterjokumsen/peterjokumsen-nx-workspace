name: '[üß™üèóÔ∏èüöÄ] CI/CD'
# Workflow to build, test, lint, and deploy application(s)
on:
  push:
    branches:
      - main
  pull_request:
    types: [opened, synchronize, reopened, closed]
    branches:
      - main

permissions:
  id-token: write
  contents: write
  pull-requests: write
  security-events: write

jobs:
  # lint and test all affected
  lint_test_build:
    if: |
      (github.event_name == 'pull_request' && github.event.action != 'closed') ||
      (github.event_name == 'push' && github.ref == 'refs/heads/main')
    name: 'üß™ & üßπÔ∏è'
    uses: './.github/workflows/_workflow.jobs.ci.yml'
    secrets: inherit

  # build and deploy blog
  build_deploy:
    strategy:
      matrix:
        project:
          - name: 'blog'
            resource_group: 'blog-rg'
            build_location: 'dist/apps/blog'
            sub_domain: 'blog'
            audit_urls: |
              /
              /about-me
              /development-notes
              /not/found

    name: üèóÔ∏è ${{ matrix.project.name }} üöÄ
    if: always() && needs.lint_test_build.result != 'failure'
    uses: './.github/workflows/_workflow.jobs.cd.yml'
    needs:
      - lint_test_build
    with:
      project_name: ${{ matrix.project.name }}
      resource_group: ${{ matrix.project.resource_group }}
      build_location: ${{ matrix.project.build_location }}
      sub_domain: ${{ matrix.project.sub_domain }}
      audit_urls: ${{ matrix.project.audit_urls }}
    secrets: inherit

  audit_deployed:
    name: 'üîç Audit üöÄ'
    runs-on: ubuntu-latest
    needs:
      - build_deploy
    steps:
      - name: Get audit URLS üì©
        uses: actions/download-artifact@v4
        with:
          path: urls
          merge-multiple: true

      - name: Prepare audit URLs üìù
        id: prepare_audit_urls
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const path = require('path');
            const projects = {};
            const urls = [];

            try {
              for (const file of fs.readdirSync(path.resolve('urls'))) {
                if (!file.endsWith('_full_urls.txt')) {
                  continue;
                }

                core.startGroup(`Reading URLs from ${file}`);

                const project = file.replace('_full_urls.txt', '');
                core.info('Project: ', project);

                const allUrls = fs.readFileSync(path.resolve('urls', file), 'utf8');
                if (allUrls.trim() !== '') {
                  const projectBaseUrl = allUrls.split('\n')[0];
                  projects[project] = projectBaseUrl.slice(0, -1);
                  urls.push(allUrls);

                  core.info('URLs: ', allUrls);
                  core.info('Project base URL: ', projects[project]);
                } else {
                  core.warning(`No URLs found for ${project}`);
                }

                core.endGroup();
              }
            } catch (error) {
              core.warning(`An error occurred while reading audit URLs ${error}`);
            }

            core.setOutput('hasUrls', urls.length > 0);
            core.setOutput('projects', projects);
            core.setOutput('urls', urls.join('\n'));

      # run lighthouse audit on the provided URLs
      # uses config from .github/lighthouse/lighthouse.config.json
      - name: Audit URLs üßê
        id: lighthouse_audit
        if: steps.prepare_audit_urls.outputs.hasUrls
        uses: treosh/lighthouse-ci-action@v12
        with:
          urls: ${{ steps.prepare_audit_urls.outputs.urls }}
          configPath: ./.github/lighthouse/lighthouse.config.json
          uploadArtifacts: true
          temporaryPublicStorage: true
          runs: 1

      - name: 'Format lighthouse score ‚úèÔ∏è'
        id: format_lighthouse_score
        if: steps.prepare_audit_urls.outputs.hasUrls
        uses: actions/github-script@v7
        with:
          script: |
            const lighthouseCommentMaker = require('./.github/lighthouse/lighthouse-report.parser.js');

            const lighthouseOutputs = {
              manifest: ${{ steps.lighthouse_audit.outputs.manifest }},
              links: ${{ steps.lighthouse_audit.outputs.links }},
            };

            const project_urls = JSON.parse(${{ steps.prepare_audit_urls.outputs.projects }});

            const comment = lighthouseCommentMaker({ lighthouseOutputs, project_urls }, core.summary);
            core.setOutput("comment", comment);

      - name: Add Lighthouse stats as comment ‚úçÔ∏è
        id: comment_to_pr
        if: github.event_name == 'pull_request'
        uses: marocchino/sticky-pull-request-comment@v2
        with:
          number: ${{ github.event.pull_request.number }}
          header: lighthouse
          message: ${{ steps.format_lighthouse_score.outputs.comment }}

  ci_status:
    name: 'CI Status ‚úÖ'
    runs-on: ubuntu-latest
    needs:
      - lint_test_build
      - build_deploy
      - audit_deployed
    if: always()
    steps:
      - name: 'lint_test_build failed'
        if: needs.lint_test_build.result == 'failure'
        run: |
          echo "::error::lint_test_build failed"
          exit 1

      - name: 'build_deploy failed'
        if: needs.build_deploy.result == 'failure'
        run: |
          echo "::error::build_deploy failed"
          exit 1

      - name: 'audit_deployed failed'
        if: needs.audit_deployed.result == 'failure'
        run: |
          echo "::error::audit_deployed failed"
          exit 1

      - name: 'checks completed'
        run: echo "All checks done"
