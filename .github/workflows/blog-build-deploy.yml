name: 'Blog - Build and Deploy 🏗️'

on:
  push:
    branches:
      - main
  pull_request:
    types: [opened, synchronize, reopened, closed]
    branches:
      - main
  workflow_dispatch:
    inputs:
      deploy_bicep:
        description: 'Lint & Deploy Bicep files'
        required: false
        default: 'No'
        type: 'choice'
        options:
          - 'Yes'
          - 'No'
      test_affected:
        description: 'Test affected'
        required: false
        default: 'Yes'
        type: 'choice'
        options:
          - 'Yes'
          - 'No'
      build_and_deploy:
        description: 'Build and deploy application'
        required: false
        default: 'Yes'
        type: 'choice'
        options:
          - 'Yes'
          - 'No'

permissions:
  id-token: write
  contents: write
  pull-requests: write
  security-events: write

env:
  bicep_main_file: ./.biceps/main.bicep
  resource_group: blog-rg
  location: westeurope
  app_name: blog
  prod_branch: 'main'
  branch_name: ${{ github.head_ref || github.ref_name }}
  projects_to_build: 'blog' # comma-separated list of projects to build

jobs:
  env_prep:
    runs-on: ubuntu-latest
    name: 'Prepare ENV 🛠️'
    steps:
      - name: 'Prepare outputs ⬆️'
        id: prepare_names
        run: |
          echo "bicep_main_file=${{ env.bicep_main_file }}" >> $GITHUB_OUTPUT
          echo "resource_group=${{ env.resource_group }}" >> $GITHUB_OUTPUT
          echo "app_name=${{ env.app_name }}" >> $GITHUB_OUTPUT
          echo "branch_name=${{ env.branch_name }}" >> $GITHUB_OUTPUT
          echo "projects_to_build=${{ env.projects_to_build }}" >> $GITHUB_OUTPUT
          echo "location=${{ env.location }}" >> $GITHUB_OUTPUT
    outputs:
      bicep_main_file: ${{ steps.prepare_names.outputs.bicep_main_file }}
      resource_group: ${{ steps.prepare_names.outputs.resource_group }}
      app_name: ${{ steps.prepare_names.outputs.app_name }}
      branch_name: ${{ steps.prepare_names.outputs.branch_name }}
      projects_to_build: ${{ steps.prepare_names.outputs.projects_to_build }}
      location: ${{ steps.prepare_names.outputs.location }}

  prep:
    uses: './.github/workflows/workflow-prep.yml'
    needs:
      - env_prep
    with:
      branch_name: ${{ needs.env_prep.outputs.branch_name }}
      resource_group: ${{ needs.env_prep.outputs.resource_group }}
      app_name: ${{ needs.env_prep.outputs.app_name }}
      bicep_main_file: ${{ needs.env_prep.outputs.bicep_main_file }}
      location: ${{ needs.env_prep.outputs.location }}

  deploy_bicep:
    if: |
      (github.event_name == 'workflow_dispatch' && inputs.deploy_bicep == 'Yes') ||
      (github.event_name == 'pull_request' && github.event.action != 'closed') ||
      (github.event_name == 'push' && github.ref == 'refs/heads/main')
    uses: './.github/workflows/workflow-bicep-deploy.yml'
    needs:
      - prep
    with:
      parameters: ${{ needs.prep.outputs.parameters }}
      app_name: ${{ needs.prep.outputs.app_name }}
    secrets:
      AZURE_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
      AZURE_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
      AZURE_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

  test_affected:
    if: |
      github.event_name != 'workflow_dispatch' ||
      inputs.test_affected == 'Yes'
    uses: './.github/workflows/workflow-test-affected.yml'
    needs:
      - env_prep
    with:
      project_name: ${{ needs.env_prep.outputs.app_name }}

  build_app:
    needs:
      - env_prep
      - test_affected
    if: |
      needs.test_affected.outputs.is_affected == 'Yes' &&
      ((github.event_name == 'workflow_dispatch' && inputs.build_and_deploy == 'Yes') ||
      github.event_name == 'push' ||
      (github.event_name == 'pull_request' && github.event.action != 'closed'))
    uses: './.github/workflows/workflow-build-app.yml'
    with:
      project_names: ${{ needs.env_prep.outputs.projects_to_build }}

  deploy_app:
    needs:
      - prep
      - test_affected
      - build_app
      - deploy_bicep
    if: |
      needs.test_affected.outputs.is_affected == 'Yes' &&
      ((github.event_name == 'workflow_dispatch' && inputs.build_and_deploy == 'Yes') ||
      github.event_name == 'push' ||
      (github.event_name == 'pull_request' && github.event.action != 'closed'))
    runs-on: ubuntu-latest
    name: 'Deploy app 🚀'
    steps:
      - name: 'AZ CLI login 🔑'
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: 'Get API key 🔑'
        id: static_web_app_apikey
        uses: azure/CLI@v2
        with:
          inlineScript: |
            apiKey=$(az staticwebapp secrets list \
              --name '${{ needs.prep.outputs.app_name }}-static-web-app' \
              | jq -r '.properties.apiKey')
            echo "api_key=$apiKey" >> $GITHUB_OUTPUT

      - name: 'Download artifacts 📥'
        uses: actions/download-artifact@v4
        with:
          name: compiled-app
          path: dist

      - name: 'Publish SWA 🚀'
        id: publish_swa
        uses: azure/static-web-apps-deploy@v1
        if: steps.static_web_app_apikey.outputs.api_key != ''
        with:
          azure_static_web_apps_api_token: ${{ steps.static_web_app_apikey.outputs.api_key }}
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          action: 'upload'
          app_location: 'dist/apps/blog/browser'
          api_location: '' # Empty for now, no API to deploy
          skip_app_build: true

    outputs:
      deployed_url: ${{ steps.publish_swa.outputs.static_web_app_url }}

  wait_for_deployment:
    name: 'Wait for deployment ⌚'
    needs: deploy_app
    if: github.event_name == 'pull_request' && github.event.action != 'closed'
    runs-on: ubuntu-latest
    steps:
      - name: 'Wait for preview ${{ needs.deploy_app.outputs.deployed_url }} ⌚'
        uses: nev7n/wait_for_response@v1
        with:
          url: '${{ needs.deploy_app.outputs.deployed_url }}'
          responseCode: 200
          timeout: 600000
          interval: 1000

  lighthouse_report_job:
    name: Lighthouse report 💡🏠
    needs:
      - deploy_app
      - wait_for_deployment
    if: github.event_name == 'pull_request' && github.event.action != 'closed'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Audit URLs 🧐
        id: lighthouse_audit
        uses: treosh/lighthouse-ci-action@v11
        with:
          urls: |
            ${{ needs.deploy_app.outputs.deployed_url }}
            ${{ needs.deploy_app.outputs.deployed_url }}/about-me
          configPath: ./.github/lighthouse/lighthousesrc.json
          uploadArtifacts: true
          temporaryPublicStorage: true
          runs: 1

      - name: Format lighthouse score
        id: format_lighthouse_score
        uses: actions/github-script@v7
        with:
          script: |
            const lighthouseCommentMaker = require('./.github/lighthouse/lighthouseCommentMaker.js');

            const lighthouseOutputs = {
              manifest: ${{ steps.lighthouse_audit.outputs.manifest }},
              links: ${{ steps.lighthouse_audit.outputs.links }}
            };

            const comment = lighthouseCommentMaker({ lighthouseOutputs });
            core.setOutput("comment", comment);

      - name: Add Lighthouse stats as comment ✍️
        id: comment_to_pr
        uses: marocchino/sticky-pull-request-comment@v2
        with:
          number: ${{ github.event.pull_request.number }}
          header: lighthouse
          message: ${{ steps.format_lighthouse_score.outputs.comment }}

  end_to_end_tests:
    name: 'End-to-end tests 🧪'
    needs:
      - deploy_app
      - wait_for_deployment
    if: github.event_name == 'pull_request' && github.event.action != 'closed'
    runs-on: ubuntu-latest
    steps:
      - name: 'Placeholder for end-to-end tests 🧪'
        run: echo "No end-to-end tests configured, yet."
      # - name: 'Checkout 📥'
      #   uses: actions/checkout@v4

      # - name: 'Install dependencies 📦'
      #   uses: ./.github/actions/install-deps

      # - name: 'Run end-to-end tests 🧪'
      #   run: |
      #     echo "running: npx nx run-many -t e2e --all"
      #     npx nx run-many -t e2e --all
      #   env:
      #     NX_REJECT_UNKNOWN_LOCAL_CACHE: 0

  close_preview:
    if: github.event_name == 'pull_request' && github.event.action == 'closed'
    runs-on: ubuntu-latest
    name: 'Cleanup staging 💥'
    needs:
      - prep
    steps:
      - name: 'AZ CLI login 🔑'
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: 'Get API Key 🔑'
        id: static_web_app_apikey
        uses: azure/CLI@v2
        with:
          inlineScript: |
            apiKey=$(az staticwebapp secrets list \
              --name '${{ needs.prep.outputs.app_name }}-static-web-app' \
              | jq -r '.properties.apiKey')
            echo "api_key=$apiKey" >> $GITHUB_OUTPUT

      - name: 'Destroy staging environment 💥'
        uses: Azure/static-web-apps-deploy@v1
        with:
          azure_static_web_apps_api_token: ${{ steps.static_web_app_apikey.outputs.api_key }}
          action: 'close'
