name: 'Blog - Build and Deploy 🏗️'

on:
  push:
    branches:
      - main
  pull_request:
    types: [opened, synchronize, reopened, closed]
    branches:
      - main
  workflow_dispatch:
    inputs:
      lint_deploy_bicep:
        description: 'Lint & Deploy Bicep files'
        required: false
        default: 'No'
        type: 'choice'
        options:
          - 'Yes'
          - 'No'
      test_and_lint:
        description: 'Test and lint application'
        required: false
        default: 'Yes'
        type: 'choice'
        options:
          - 'Yes'
          - 'No'
      build_and_deploy:
        description: 'Build and deploy application'
        required: false
        default: 'Yes'
        type: 'choice'
        options:
          - 'Yes'
          - 'No'

permissions:
  id-token: write
  contents: write
  pull-requests: write
  security-events: write

env:
  bicep_main_file: ./.biceps/main.bicep
  resource_group: blog-rg
  location: westeurope
  app_name: blog
  tags: '{"app":"peterjokumsen-blog"}'
  branch_name: ${{ github.head_ref || github.ref_name }}
  projects_to_build: 'blog' # comma-separated list of projects to build

jobs:
  prep:
    runs-on: ubuntu-latest
    name: 'Prepare 🛠️'
    steps:
      - name: 'Prepare names 📝'
        id: prepare_names
        run: |
          gitSha='${{ github.sha }}'
          shortSha=${gitSha:0:7}
          branchName='${{ env.branch_name }}'
          appName='${{ env.app_name }}'
          subDomain='${{ env.app_name }}'
          resourceGroup='${{ env.resource_group }}'

          if [ "${{ github.event_name }}" == 'pull_request' ]; then
            branchName="${{ env.branch_name }}-pr-${{ github.event.number }}"
            subDomain="${{ env.app_name }}-pr-${{ github.event.number }}"
            appName="${{ env.app_name }}-pr-${{ github.event.number }}"
            resourceGroup="${{ env.resource_group }}-pr-${{ github.event.number }}"
          fi

          deploymentName="${branchName////-}.$shortSha"

          echo "Deployment name: $deploymentNae"
          echo "generated_name=$deploymentName" >> $GITHUB_OUTPUT
          echo "Sub-domain: $subDomain"
          echo "sub_domain=$subDomain" >> $GITHUB_OUTPUT
          echo "App name: $appName"
          echo "app_name=$appName" >> $GITHUB_OUTPUT
          echo "Resource group: $resourceGroup"
          echo "resource_group=$resourceGroup" >> $GITHUB_OUTPUT

      - name: 'Set group deployment parameters 📝'
        id: group_deployment_parameters
        run: |
          if [ -z "${{ env.bicep_main_file }}" ]; then
            echo "::error::Bicep main file not found"
            exit 1
          fi

          basicParameters="--name '${{ steps.prepare_names.outputs.generated_name }}' \
              --template-file ${{ env.bicep_main_file }} \
              --parameters \
                  branch='main' \
                  location='${{ env.location }}' \
                  tags='${{ toJSON(env.tags) }}'"

          previewParameters="--resource-group ${{ steps.prepare_names.outputs.resource_group }} \
              $basicParameters \
                  appName='${{ steps.prepare_names.outputs.app_name }}' \
                  subDomain='${{ steps.prepare_names.outputs.sub_domain }}'"

          prodParameters="--resource-group ${{ env.resource_group }} \
              $basicParameters \
                  appName='${{ env.app_name }}' \
                  subDomain='${{ env.app_name }}'"

          echo "preview_parameters=$previewParameters" >> $GITHUB_OUTPUT
          echo "prod_parameters=$prodParameters" >> $GITHUB_OUTPUT

    outputs:
      app_name: ${{ steps.prepare_names.outputs.app_name }}
      preview_parameters: ${{ steps.group_deployment_parameters.outputs.preview_parameters }}
      prod_parameters: ${{ steps.group_deployment_parameters.outputs.prod_parameters }}
      resource_group: ${{ steps.prepare_names.outputs.resource_group }}

  lint_deploy_bicep:
    if: |
      (github.event_name == 'workflow_dispatch' && inputs.lint_deploy_bicep == 'Yes') ||
      (github.event_name == 'pull_request' && github.event.action != 'closed') ||
      (github.event_name == 'push' && github.ref == 'refs/heads/main')
    runs-on: ubuntu-latest
    needs:
      - prep
    name: 'Lint & Deploy Bicep 💪'
    steps:
      - name: 'Checkout 📥'
        uses: actions/checkout@v4

      - name: 'AZ CLI login 🔑'
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: 'Lint Bicep 🔍'
        if: github.event_name != 'push'
        uses: azure/CLI@v2
        with:
          inlineScript: |
            az version
            az bicep install
            az bicep version
            az bicep lint --file ${{ env.bicep_main_file }} --diagnostics-format sarif > bicep.sarif
            echo '::group::Bicep linting results'
            cat bicep.sarif
            echo '::endgroup::'

      - name: 'Upload SARIF ↗️'
        if: |
          (success() || failure()) &&
          github.event_name != 'push'
        uses: github/codeql-action/upload-sarif@v3
        with:
          category: bicep
          sarif_file: bicep.sarif

      - name: 'Detect changes & validate 📝'
        if: github.event_name != 'push'
        id: static_web_app_what_if
        uses: azure/CLI@v2
        with:
          inlineScript: |
            # https://github.com/Azure/azure-cli/issues/25710
            az config set bicep.use_binary_from_path=false

            echo "::group::Static Web App what-if"
            az deployment group what-if \
              ${{ needs.prep.outputs.prod_parameters }} \
                repositoryToken='${{ secrets.GITHUB_TOKEN }}'

            echo "::endgroup::"

            echo "::group::Static Web App validate"
            az deployment group validate \
              ${{ needs.prep.outputs.prod_parameters }} \
                repositoryToken='${{ secrets.GITHUB_TOKEN }}'

            echo "::endgroup::"

      - name: 'Prepare parameters for deployment 📝'
        id: prepare_parameters
        run: |
          parameters="${{ needs.prep.outputs.prod_parameters }}"
          if [ "${{ github.event_name }}" != 'push' ]; then
              echo "::command::using preview parameters"
              parameters="${{ needs.prep.outputs.preview_parameters }}"
          else
              echo "::command::using prod parameters"
          fi

          echo "parameters=$parameters" >> $GITHUB_OUTPUT

      - name: 'Deploy bicep for SWA 🚀'
        uses: azure/CLI@v2
        with:
          inlineScript: |
            # https://github.com/Azure/azure-cli/issues/25710
            az config set bicep.use_binary_from_path=false
            echo "::group::Static Web App deployment"
            az deployment group create ${{ steps.prepare_parameters.outputs.parameters }} \
                repositoryToken='${{ secrets.GITHUB_TOKEN }}'

            echo "::endgroup::"

  test_and_lint:
    if: |
      (github.event_name != 'workflow_dispatch' || inputs.test_and_lint == 'Yes') &&
      github.event.action != 'closed'
    runs-on: ubuntu-latest
    name: 'Test & lint 🧪'
    steps:
      - name: 'Checkout 📥'
        uses: actions/checkout@v4
        with:
          # Number of commits to fetch. 0 indicates all history for all branches and tags.
          fetch-depth: 0
          submodules: true

      - name: 'Install dependencies 📦'
        uses: ./.github/actions/install-deps

      - name: 'Lint all 🧹'
        run: |
          echo "::command::npx nx run-many -t lint --all"
          npx nx run-many -t lint --all
        env:
          NX_REJECT_UNKNOWN_LOCAL_CACHE: 0

      - name: 'Test all 🧪'
        if: always()
        run: |
          echo "::command::npx nx run-many -t test -c ci --all"
          npx nx run-many -t test -c ci --all
        env:
          NX_REJECT_UNKNOWN_LOCAL_CACHE: 0

  build_app:
    if: |
      (github.event_name == 'workflow_dispatch' && inputs.build_and_deploy == 'Yes') ||
      github.event_name == 'push' ||
      (github.event_name == 'pull_request' && github.event.action != 'closed')
    runs-on: ubuntu-latest
    name: 'Build app 🏗️'
    steps:
      - name: 'Checkout 📥'
        uses: actions/checkout@v4

      - name: 'Install dependencies 📦'
        uses: ./.github/actions/install-deps
        with:
          nx-cache-key: 'nx-build'

      - name: 'Build app(s) 🏗️'
        run: |
          echo "::command::npx nx run-many -t build --projects=${{ env.projects_to_build }}"
          npx nx run-many -t build --projects=${{ env.projects_to_build }}
        env:
          NX_REJECT_UNKNOWN_LOCAL_CACHE: 0

      - name: 'Upload artifacts 🚀'
        uses: actions/upload-artifact@v4
        with:
          name: compiled-app
          path: 'dist'

  deploy_app:
    if: |
      (github.event_name == 'workflow_dispatch' && inputs.build_and_deploy == 'Yes') ||
      github.event_name == 'push' ||
      (github.event_name == 'pull_request' && github.event.action != 'closed')
    runs-on: ubuntu-latest
    name: 'Deploy app 🚀'
    needs:
      - prep
      - build_app
      - lint_deploy_bicep
    steps:
      - name: 'AZ CLI login 🔑'
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: 'Get API key 🔑'
        id: static_web_app_apikey
        uses: azure/CLI@v2
        with:
          inlineScript: |
            apiKey=$(az staticwebapp secrets list \
              --resource-group '${{ needs.prep.outputs.resource_group }}' \
              --name '${{ needs.prep.outputs.app_name }}-static-web-app' \
              | jq -r '.properties.apiKey')
            echo "api_key=$apiKey" >> $GITHUB_OUTPUT

      - name: 'Download artifacts 📥'
        uses: actions/download-artifact@v4
        with:
          name: compiled-app
          path: dist

      - name: 'Publish SWA 🚀'
        uses: azure/static-web-apps-deploy@v1
        if: steps.static_web_app_apikey.outputs.api_key != ''
        with:
          azure_static_web_apps_api_token: ${{ steps.static_web_app_apikey.outputs.api_key }}
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          action: 'upload'
          app_location: 'dist/apps/blog/browser'
          api_location: '' # Empty for now, no API to deploy
          skip_app_build: true
          production_branch: 'main'

  close_preview:
    if: github.event_name == 'pull_request' && github.event.action == 'closed'
    runs-on: ubuntu-latest
    name: 'Cleanup staging 💥'
    needs:
      - prep
    steps:
      - name: 'AZ CLI login 🔑'
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: 'Remove preview resource group 💥'
        id: clear_resource_group
        uses: azure/CLI@v2
        with:
          inlineScript: |
            az group delete --name ${{ needs.prep.outputs.resource_group }} --yes --no-wait
