name: '[♻️] lint_test_build_affected'
# This workflow executes the linting, testing, and building of the affected applications
on:
  workflow_call:
    inputs:
      project_name:
        description: 'Project name'
        required: true
        type: string
      build_location:
        description: 'Where the app is compiled to, to be published as artifact'
        required: true
        type: string
      infra_affected:
        description: 'Is the infra affected by the latest changes? (Yes/No)'
        required: true
        type: string
      project_affected:
        description: 'Is the project affected by the latest changes? (Yes/No)'
        required: true
        type: string
      nx_base:
        description: 'Base SHA for nx commands'
        required: true
        type: string
    secrets:
      AZURE_CLIENT_ID:
        description: 'Azure Client ID'
        required: true
      AZURE_TENANT_ID:
        description: 'Azure Tenant ID'
        required: true
      AZURE_SUBSCRIPTION_ID:
        description: 'Azure Subscription ID'
        required: true
      NX_CLOUD_ACCESS_TOKEN:
        description: 'Nx Cloud Access Token'
        required: true
      CODECOV_TOKEN:
        description: 'Codecov Token'
        required: true

    outputs:
      uploaded_artifacts:
        description: 'Artifacts in build_location after building affected'
        value: ${{ jobs.build_affected.outputs.uploaded }}

permissions:
  id-token: write
  contents: write
  pull-requests: write
  security-events: write

jobs:
  # test and lint the affected libraries/applications, when the project is affected
  # will only test/lint affected when workflow is triggered by a pull_request
  # will test all when workflow is triggered by a push
  test_and_lint:
    if: |
      inputs.project_affected == 'Yes'
      && github.event.action != 'closed'
    runs-on: ubuntu-latest
    name: 'Test & lint 🧪'
    steps:
      - name: 'Checkout 📥'
        uses: actions/checkout@v4

      - name: 'Fetch main branch 🌿'
        run: |
          git rev-parse --verify main || (git remote set-branches origin main && git fetch --depth 1 origin main && git branch main origin/main)

      - name: 'Install dependencies 📦'
        uses: ./.github/actions/install-deps

      - name: 'Check formatting 📐'
        run: npx nx format:check

      - name: 'Lint, Test affected 🧪'
        id: test_affected
        if: github.event_name != 'push'
        run: |
          echo ::group::nx affected -t lint test --configuration=ci --base="${{ inputs.nx_base }}"
          npx nx affected -t lint test --configuration=ci --base="${{ inputs.nx_base }}"
          echo ::endgroup::
          coverage_reports="No"
          if [ -d "coverage" ]; then
            coverage_reports="Yes"
          fi

          echo output [coverage_reports="$coverage_reports"]
          echo coverage_reports="$coverage_reports" >> "$GITHUB_OUTPUT"
        env:
          NX_CLOUD_ACCESS_TOKEN: ${{ secrets.NX_CLOUD_ACCESS_TOKEN }}

      - name: 'Lint, Test all 🧪'
        run: npx nx run-many -t lint test --configuration=ci
        if: github.event_name == 'push'
        env:
          NX_CLOUD_ACCESS_TOKEN: ${{ secrets.NX_CLOUD_ACCESS_TOKEN }}

      - name: 'Publish coverage 📊'
        if: |
          github.event_name == 'push' ||
          steps.test_affected.outputs.coverage_reports == 'Yes'
        uses: codecov/codecov-action@v4
        with:
          directory: coverage
          verbose: true
          token: ${{ secrets.CODECOV_TOKEN }}

  # build the project when it is affected by the latest changes
  # will publish the compiled files as 'compiled-app' artifact
  build_affected:
    if: |
      inputs.project_affected == 'Yes' || inputs.infra_affected == 'Yes'
      && github.event.action != 'closed'
    runs-on: ubuntu-latest
    name: 'Build affected 🏗️'
    outputs:
      uploaded: ${{ steps.build_affected.outputs.compiled_files }}
    steps:
      - name: 'Checkout 📥'
        uses: actions/checkout@v4

      - name: 'Install dependencies 📦'
        uses: ./.github/actions/install-deps

      - name: 'Build affected 🏗️'
        id: build_affected
        run: |
          echo "Setting up configuration for build step"
          build_configuration="production"
          branch_name="${{ github.ref }}"
          if [ "$branch_name" != "refs/heads/main" ]; then
            build_configuration="staging"
          fi
          echo "$build_configuration is the configuration for branch $branch_name"

          echo "::group::nx run ${{ inputs.project_name }}:build:$build_configuration"
          npx nx run "${{ inputs.project_name }}:build:$build_configuration"
          echo "::endgroup::"
          compiled_files="No"
          if [ -d "${{ inputs.build_location }}" ]; then
            compiled_files="Yes"
          fi

          echo "output [compiled_files=$compiled_files]"
          echo "compiled_files=$compiled_files" >> "$GITHUB_OUTPUT"
        env:
          NX_CLOUD_ACCESS_TOKEN: ${{ secrets.NX_CLOUD_ACCESS_TOKEN }}

      - name: 'Upload artifacts 🚀'
        uses: actions/upload-artifact@v4
        if: steps.build_affected.outputs.compiled_files != 'No'
        with:
          name: compiled-app
          path: ${{ inputs.build_location }}
