@use '@angular/material' as mat;

@import './declare-color-classes';
@import './declare-block-classes';
@import './set-variables';

@function get-palette($theme, $color) {
  @return map-get(map-get($theme, color), $color);
}

@function get-color($palette, $hue) {
  @return mat.get-color-from-palette($palette, $hue);
}

@function get-colors-from-theme($theme) {
  $primary-palette: get-palette($theme, primary);
  $accent-palette: get-palette($theme, accent);
  $warn-palette: get-palette($theme, warn);

  $primary: get-color($primary-palette, 'lighter');
  $primary-contrast: get-color($primary-palette, default-contrast);
  $accent: get-color($accent-palette, 'default');
  $accent-contrast: get-color($accent-palette, default-contrast);
  $warn: get-color($warn-palette, 'default');
  $warn-contrast: get-color($warn-palette, default-contrast);
  $bg-color: null;
  $color: null;
  $main-bg-color: map-get(map-get($theme, background), background);
  $main-text-color: map-get(map-get($theme, foreground), text);
  $accent-bg-color: null;
  $accent-text-color: null;
  $error-bg-color: null;
  $error-text-color: null;

  @if (map-get($theme, 'is-dark')) {
    $bg-color: $primary-contrast;
    $color: $primary;
    $accent-bg-color: $accent-contrast;
    $accent-text-color: $accent;
    $error-bg-color: $warn-contrast;
    $error-text-color: $warn;
  } @else {
    $bg-color: $primary;
    $color: $primary-contrast;
    $accent-bg-color: $accent;
    $accent-text-color: $accent-contrast;
    $error-bg-color: $warn;
    $error-text-color: $warn-contrast;
  }

  @return (
    'background': $bg-color,
    'foreground': $color,
    'main': (
      'background': $main-bg-color,
      'foreground': $main-text-color,
    ),
    'accent': (
      'background': $accent-bg-color,
      'foreground': $accent-text-color,
    ),
    'error': (
      'background': $error-bg-color,
      'foreground': $error-text-color,
    )
  );
}

@mixin generate-from-theme-base($theme) {
  @include mat.core-base($theme);
  @include mat.core-density($theme);
  @include mat.core-typography($theme);

  @include mat.button-base($theme);
  @include mat.button-density($theme);
  @include mat.button-typography($theme);
}

@mixin generate-root-base() {
  html,
  body {
    height: 100%;
  }

  body {
    margin: 0;
    font-family: Montserrat, 'Helvetica Neue', sans-serif;
  }
}

@mixin generate-root-elements($theme) {
  @include declare-body-color(get-colors-from-theme($theme));
}

@mixin generate-from-theme($theme, $initial: false) {
  $is-dark: map-get($theme, is-dark);
  @if ($initial == false) {
    @include mat.all-component-themes($theme);

    @include generate-root-base();
    @include generate-root-elements($theme);

    .theme-loaded {
      @if ($is-dark) {
        content: 'dark-loaded';
      } @else {
        content: 'light-loaded';
      }
    }
  } @else {
    @include mat.core-color($theme);
    @include mat.button-color($theme);
  }

  $colors: get-colors-from-theme($theme);

  :root {
    @include set-variables($colors);
  }

  @include declare-color-classes($colors);

  @include declare-block-classes($colors);
}
